/*题目：请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。
路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。
如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。 例如 a b c e s f c s a d e e 矩阵中包含一条字符串"bcced"的路径，
但是矩阵中不包含"abcb"路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。*/
//思路：典型的递归调用模型，注意是一维数组实现，注意下标转换是 index=i*列数（每行个数）+j
//总结：模板为：visited数组-遍历矩阵调用核心函数-返回结果；核心函数：边界条件、访问条件和要求条件不满足则返回-标记visited数组-4个方向调用-解标记-返回结果
public class Solution {
    public boolean hasPath(char[] matrix, int rows, int cols, char[] str){
        boolean[] visited=new boolean[matrix.length];
        for(int i=0;i<rows;i++)
            for(int j=0;j<cols;j++)
                if(help(matrix,i,j,rows,cols,str,0,visited))
                    return true;
        return false;
    }
    public boolean help(char[] matrix,int i,int j,int m,int n,char[] str,int k,boolean[] visited){
        int index=i*n+j;
        if(i<0 || i>=m || j<0 || j>=n || visited[index] || matrix[index]!=str[k])
            return false;
        if(k==str.length-1)    return true;
        visited[index]=true;
        int[][] dir=new int[][]{{1,0},{-1,0},{0,1},{0,-1}};
        for(int s=0;s<4;s++){
            int x=i+dir[s][0],y=j+dir[s][1];
            if(help(matrix,x,y,m,n,str,k+1,visited))
                return true;
        }
        visited[index]=false;
        return false;
    }
}
